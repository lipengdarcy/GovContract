<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd"
	default-lazy-init="true">


	<!-- 配置权限管理器 -->
	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
		<!-- ref对应我们写的realm dbRealm -->
		<!-- Single realm app. If you have multiple realms, use the 'realms' property 
			instead. -->

		<property name="realm" ref="dbRealm" />
		<!-- 使用下面配置的缓存管理器 -->
		<property name="cacheManager" ref="shirocacheManager" />
	</bean>

	<bean id="dbRealm"
		class="com.witsafe.framework.security.shiro.ShiroAuthorizingRealm">
		<property name="userManager" ref="userManager" />
	</bean>

	<!-- 配置shiro的过滤器工厂类，id- shiroFilter要和我们在web.xml中配置的过滤器一致 -->
	<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
		<!-- 调用我们配置的权限管理器 -->
		<property name="securityManager" ref="securityManager" />
		<!-- 配置我们的登录请求地址 -->
		<property name="loginUrl" value="/login" />
		<!-- 配置我们在登录页登录成功后的跳转地址，如果你访问的是非/login地址，则跳到您访问的地址 -->
		<property name="successUrl" value="/home" />
		<!-- 如果您请求的资源不再您的权限范围，则跳转到/403请求地址 -->
		<property name="unauthorizedUrl" value="/403" />

		<!-- 权限配置 -->
		<property name="filterChainDefinitions">
			<value>
				<!-- anon表示此地址不需要任何权限即可访问 -->
				/static/**=anon
				<!-- perms[user:query]表示访问此连接需要权限为user:query的用户 -->
				/user=perms[user:query]
				<!-- roles[manager]表示访问此连接需要用户的角色为manager -->
				/user/add=roles[manager]
				/user/del/**=roles[admin]
				/user/edit/**=roles[manager]
				<!--所有的请求(除去配置的静态资源请求或请求地址为anon的请求)都要通过登录验证,如果未登录则跳到/login -->
				/** = authc
				/logout = logout
			</value>
		</property>
	</bean>
	
<!-- Shiro内置的FilterChain Filter Name	Class -->
<!-- anon	org.apache.shiro.web.filter.authc.AnonymousFilter -->
<!-- authc	org.apache.shiro.web.filter.authc.FormAuthenticationFilter -->
<!-- authcBasic	org.apache.shiro.web.filter.authc.BasicHttpAuthenticationFilter -->
<!-- perms	org.apache.shiro.web.filter.authz.PermissionsAuthorizationFilter -->
<!-- port	org.apache.shiro.web.filter.authz.PortFilter -->
<!-- rest	org.apache.shiro.web.filter.authz.HttpMethodPermissionFilter -->
<!-- roles	org.apache.shiro.web.filter.authz.RolesAuthorizationFilter -->
<!-- ssl	org.apache.shiro.web.filter.authz.SslFilter -->
<!-- user	org.apache.shiro.web.filter.authc.UserFilter -->



	<!-- <bean id="shirocacheManager" class="org.apache.shiro.cache.MemoryConstrainedCacheManager" /> -->
	<bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor" />
	
	<!-- Let's use some enterprise caching support for better performance. You 
		can replace this with any enterprise caching framework implementation that 
		you like (Terracotta+Ehcache, Coherence, GigaSpaces, etc -->
	<bean id="shirocacheManager" class="org.apache.shiro.cache.MemoryConstrainedCacheManager">
		<!-- Set a net.sf.ehcache.CacheManager instance here if you already have 
			one. If not, a new one will be creaed with a default config: <property name="cacheManager" 
			ref="ehCacheManager"/> -->
		<!-- If you don't have a pre-built net.sf.ehcache.CacheManager instance 
			to inject, but you want a specific Ehcache configuration to be used, specify 
			that here. If you don't, a default will be used.: <property name="cacheManagerConfigFile" 
			value="classpath:some/path/to/ehcache.xml"/> -->
	</bean>



	<!-- <bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean"> 
		<property name="staticMethod" value="org.apache.shiro.SecurityUtils.setSecurityManager" 
		/> <property name="arguments" ref="securityManager" /> </bean> -->

</beans>
